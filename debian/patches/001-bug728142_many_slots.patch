Description: Add support for large autochangers
 For large autochangers, the buffer needed for the ReadElementStatus call can
 be too large. This patch works around this by doing multiple smaller calls.
 The maximum value of 10000 seems to be OK for this. Based on tests, the
 maximum value seems to be between 24000 and 25000, but this might
 depend on the autochanger.
 .
 This patch is based on the changes by Wayne Keseberg <wayne.keseberg@emc.com>
 in http://bugs.debian.org/728142
Author: Ivo De Decker <ivodd@debian.org>
Bug-Debian: http://bugs.debian.org/728142

Index: mtx/mtxl.c
===================================================================
--- mtx.orig/mtxl.c
+++ mtx/mtxl.c
@@ -39,6 +39,8 @@
 /* zap the following define when we finally add real import/export support */
 #define IMPORT_EXPORT_HACK 1 /* for the moment, import/export == storage */
 
+#define ReadElementStatusMaxElements 10000
+
 /* First, do some SCSI routines: */
 
 /* the camlib is used on FreeBSD. */
@@ -500,7 +502,7 @@ ElementModeSense_T *ReadAssignmentPage(D
 	retval->MaxReadElementStatusData =
 		(sizeof(ElementStatusDataHeader_T) +
 		4 * sizeof(ElementStatusPage_T) +
-		retval->NumElements * sizeof(TransportElementDescriptor_T));
+		(retval->NumElements > ReadElementStatusMaxElements?ReadElementStatusMaxElements:retval->NumElements) * sizeof(TransportElementDescriptor_T));
 
 #ifdef IMPORT_EXPORT_HACK
 	retval->NumStorage = retval->NumStorage+retval->NumImportExport;
@@ -1141,6 +1143,7 @@ ElementStatus_T *ReadElementStatus(DEVIC
 	int empty_idx = 0;
 	boolean is_attached = false;
 	int i,j;
+	int FirstElement, NumElements, NumThisTime;
 
 	ElementModeSense_T *mode_sense = NULL;
 
@@ -1207,33 +1210,47 @@ ElementStatus_T *ReadElementStatus(DEVIC
 		fprintf(stderr,"Using original element status polling method (storage, import/export, drivers etc independantly)\n");
 #endif
 		flags->elementtype = StorageElement; /* sigh! */
-		DataBuffer = SendElementStatusRequest(	MediumChangerFD, RequestSense,
-												inquiry_info, flags,
-												mode_sense->StorageStart,
-												/* adjust for import/export. */
-												mode_sense->NumStorage - mode_sense->NumImportExport,
-												mode_sense->MaxReadElementStatusData);
 
-		if (!DataBuffer)
+		NumElements = mode_sense->NumStorage - mode_sense->NumImportExport;
+		FirstElement = mode_sense->StorageStart;
+
+		do
 		{
+
+			NumThisTime = NumElements;
+			if (NumThisTime > ReadElementStatusMaxElements) NumThisTime=ReadElementStatusMaxElements;
+
+			DataBuffer = SendElementStatusRequest(	MediumChangerFD, RequestSense,
+													inquiry_info, flags,
+													FirstElement,
+													/* adjust for import/export. */
+													NumThisTime,
+													mode_sense->MaxReadElementStatusData);
+
+			if (!DataBuffer)
+			{
 #ifdef DEBUG
-			fprintf(stderr,"Had no elements!\n");
+				fprintf(stderr,"Had no elements!\n");
 #endif
-			/* darn. Free up stuff and return. */
+				/* darn. Free up stuff and return. */
 #ifdef DEBUG_MODE_SENSE
-			PrintRequestSense(RequestSense);
+				PrintRequestSense(RequestSense);
 #endif
-			FreeElementData(ElementStatus);
-			return NULL; 
-		}
+				FreeElementData(ElementStatus);
+				return NULL; 
+			}
 
 #ifdef DEBUG
-		fprintf(stderr, "Parsing storage elements\n");
+			fprintf(stderr, "Parsing storage elements\n");
 #endif
-		ParseElementStatus(EmptyStorageElementAddress, &EmptyStorageElementCount,
-			DataBuffer,ElementStatus,mode_sense,NULL);
+			ParseElementStatus(EmptyStorageElementAddress, &EmptyStorageElementCount,
+				DataBuffer,ElementStatus,mode_sense,NULL);
+
+			free(DataBuffer); /* sigh! */
+			FirstElement += NumThisTime;
+			NumElements -= NumThisTime;
 
-		free(DataBuffer); /* sigh! */
+		} while ( NumElements > 0 );
 
 		/* --------------IMPORT/EXPORT--------------- */
 		/* Next let's see if we need to do Import/Export: */
